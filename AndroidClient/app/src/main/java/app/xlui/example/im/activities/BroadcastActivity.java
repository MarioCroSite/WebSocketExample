package app.xlui.example.im.activities;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Arrays;

import app.xlui.example.im.R;
import app.xlui.example.im.conf.Const;
import app.xlui.example.im.util.StompUtils;
import ua.naiksoftware.stomp.Stomp;
import ua.naiksoftware.stomp.StompClient;
import ua.naiksoftware.stomp.dto.StompCommand;
import ua.naiksoftware.stomp.dto.StompHeader;
import ua.naiksoftware.stomp.dto.StompMessage;

public class BroadcastActivity extends AppCompatActivity {
    private Button broadcast;
    private Button groups;
    private Button chat;

    private EditText name;
    private Button send;
    private TextView result;

    private void init() {
        broadcast = findViewById(R.id.broadcast);
        broadcast.setEnabled(false);
        groups = findViewById(R.id.groups);
        chat = findViewById(R.id.chat);
        name = findViewById(R.id.name);
        send = findViewById(R.id.send);
        result = findViewById(R.id.show);
    }

    @SuppressLint("CheckResult")
    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_broadcast);

        this.init();

        StompClient stompClient = Stomp.over(Stomp.ConnectionProvider.OKHTTP, Const.address);
        // 连接服务器
        stompClient.connect();
        Toast.makeText(this, "开始连接", Toast.LENGTH_SHORT).show();
        StompUtils.lifecycle(stompClient);

        // 订阅消息
        Log.i(Const.TAG, "订阅广播");
        stompClient.topic(Const.broadcastResponse).subscribe(stompMessage -> {
            JSONObject jsonObject = new JSONObject(stompMessage.getPayload());
            Log.i(Const.TAG, "Receive: " + stompMessage.getPayload());
            runOnUiThread(() -> {
                try {
                    result.append(jsonObject.getString("response") + "\n");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            });
        });

        send.setOnClickListener(v -> {
            JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("name", name.getText());
            } catch (JSONException e) {
                e.printStackTrace();
            }

            stompClient.send(new StompMessage(
                    // Stomp command
                    StompCommand.SEND,
                    // Stomp Headers, Send Headers with STOMP
                    // the first header is necessary, and the other can be customized by ourselves
                    Arrays.asList(
                            new StompHeader(StompHeader.DESTINATION, Const.broadcast),
                            new StompHeader("authorization", "this is a token generated by your code!")
                    ),
                    // Stomp payload
                    jsonObject.toString())
            ).subscribe();
        });

        groups.setOnClickListener(v -> {
            Intent intent = new Intent();
            intent.setClass(BroadcastActivity.this, GroupActivity.class);
            startActivity(intent);
            this.finish();
        });
        chat.setOnClickListener(v -> {
            Intent intent = new Intent();
            intent.setClass(BroadcastActivity.this, ChatActivity.class);
            startActivity(intent);
            this.finish();
        });
    }
}
