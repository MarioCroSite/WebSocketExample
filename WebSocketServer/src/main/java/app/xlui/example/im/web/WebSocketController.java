package app.xlui.example.im.web;

import app.xlui.example.im.message.ChatMessage;
import app.xlui.example.im.message.Message;
import app.xlui.example.im.message.Response;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

@Controller
@Slf4j
public class WebSocketController {
    private static final String token = "this is a token generated by your code!";
    private final SimpMessagingTemplate simpMessagingTemplate;

    public WebSocketController(SimpMessagingTemplate simpMessagingTemplate) {
        this.simpMessagingTemplate = simpMessagingTemplate;
    }

    /**
     * <code>@MessageMapping</code> defines the endpoint for receiving message, client will send websocket message
     * to endpoints defined in this method. <code>@SendTo</code> defines the return value's target endpoint of some
     * method, clients which subscribe to this endpoint will receive the return value of this method. This method will
     * send received message to all clients that subscribe <code>@SendTo</code> endpoint, just like a broadcast
     *
     * <code>@MessageMapping</code> 定义接收消息的端点，客户端发送 WebSocket 消息到此端点。
     * <code>@SendTo</code> 定义方法返回值发送的端点，订阅该端点的客户端可以收到服务器端的回复。
     * 此端点默认将收到的消息发送到所有订阅了 <code>@SendTo</code> 端点的客户端，相当于广播。
     *
     * @param message            客户端消息
     * @param authorizationToken 自定义的请求校验 Token，后续也可以与 JWT 集成进行验证
     * @return 返回消息
     */
    //
    @MessageMapping("/broadcast")
    @SendTo("/b")
    public Response say(Message message, @Header(value = "authorization") String authorizationToken) {
        val response = new Response("Token check failed!");
        if (authorizationToken.equals(token)) {
            log.info("Token check success!!!");
            response.setResponse("Welcome, " + message.getName() + "!");
        } else {
            log.info(response.getResponse());
        }
        return response;
    }

    /**
     * Add a placeholder in <code>@MessageMapping</code> to get the dynamic param in websocket url, for dynamic
     * resending. Message sent to this method will be resent to any clients that subscribe endpoint {@code /g/<groupId>}.
     * Just like a group chat.
     *
     * 通过在 <code>@MessageMapping</code> 中添加消息占位符来获取 url 内容，从而动态转发。
     * 消息会发送到所有订阅了 {@code /g/<groupId>} 的客户端，实现效果相当于群聊
     *
     * @param groupID 组ID
     * @param message 发送的消息
     */
    @MessageMapping("/group/{groupID}")
    public void group(@DestinationVariable int groupID, Message message) {
        log.info("Receive group message: [" + groupID + " -> " + message.getName() + "]");
        Response response = new Response("Welcome to group " + groupID + ", " + message.getName() + "!");
        simpMessagingTemplate.convertAndSend("/g/" + groupID, response);
    }

    /**
     * Send message to specify user depend on {@code ChatMessage}, every user will subscribe himself/herself's endpoint
     * {@code /user/<userId>/msg}, just like point to point chat.
     *
     * 依据 {@code ChatMessage} 中的内容发送消息给特定用户，每个用户都订阅自己接受消息的端点
     * {@code /user/<userId>/msg}，实现效果类似点对点聊天
     *
     * @param chatMessage 聊天消息
     */
    @MessageMapping("/chat")
    public void chat(ChatMessage chatMessage) {
        log.info("Receive point-to-point chat message: [" + chatMessage.getFromUserID() + " -> " + chatMessage.getUserID() + ", " + chatMessage.getMessage() + "]");
        Response response = new Response("Receive message from user " + chatMessage.getFromUserID() + ": " + chatMessage.getMessage());
        simpMessagingTemplate.convertAndSendToUser(String.valueOf(chatMessage.getUserID()), "/msg", response);
    }
}
